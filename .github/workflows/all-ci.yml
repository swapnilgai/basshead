name: Basshead Multiplatform CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:
    inputs:
      build_ios:
        description: 'Build iOS app'
        required: false
        default: 'true'
        type: boolean

jobs:
  # Your existing Android workflow - keep it exactly as is
  android-build:
    name: Android Build (Existing Working Flow)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Set gradle.properties from secret
        run: echo "${{ secrets.KEYSTORE_PROPERTIES }}" | base64 --decode > keystore.properties

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run KtLint
        run: ./gradlew ktlintCheck --info --stacktrace

      - name: Run all build and test tasks
        run: |
          ./gradlew :composeApp:assembleInternalDebug :composeApp:assembleProductionRelease -Pbuildkonfig.flavor=internalDebug --stacktrace

      - name: Upload Android APKs
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: |
            composeApp/build/outputs/apk/internalDebug/*.apk
            composeApp/build/outputs/apk/productionRelease/*.apk
          retention-days: 14

  # iOS build - only when you're ready
  ios-check:
    name: iOS Compatibility Check
    runs-on: macos-latest
    needs: android-build
    # Only run on main branch or manual trigger to save minutes
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') || 
      (github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Check if iOS targets are configured
      - name: Check iOS Configuration
        run: |
          echo "Checking if iOS targets are configured..."
          ./gradlew tasks --all | grep -i ios || echo "No iOS tasks found - project may need iOS configuration"
        continue-on-error: true

      # Try to build iOS framework if configured
      - name: Build iOS Framework (if available)
        run: |
          if ./gradlew tasks --all | grep -q "linkDebugFrameworkIos"; then
            echo "iOS targets found, building framework..."
            ./gradlew linkDebugFrameworkIosX64 --stacktrace
          else
            echo "No iOS targets configured yet. Skipping iOS build."
            echo "To enable iOS builds, you need to:"
            echo "1. Add iOS targets to your build.gradle.kts"
            echo "2. Create iosApp module"
            echo "3. Configure Compose Multiplatform for iOS"
          fi
        continue-on-error: true

      - name: iOS Status Summary
        run: |
          echo "## iOS Build Status 🍎" >> $GITHUB_STEP_SUMMARY
          echo "This job checks if your project is ready for iOS builds." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "If you see 'No iOS targets configured', you need to:" >> $GITHUB_STEP_SUMMARY
          echo "1. Add iOS targets to your Kotlin Multiplatform configuration" >> $GITHUB_STEP_SUMMARY
          echo "2. Create an iosApp module with Xcode project" >> $GITHUB_STEP_SUMMARY
          echo "3. Set up Compose Multiplatform for iOS" >> $GITHUB_STEP_SUMMARY